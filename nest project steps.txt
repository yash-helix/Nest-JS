Installation & Setup:
a. Create a new nest project
b. Install nest, nestjs/cli, pg, graphql, nestjs/typeorm, nestjs/apollo
c. In app.module, inside '@Module' decorator specify the database details like type, host, port, username,    password, database, entities, etc. inside imports array, with help of TypeOrmModule which we can import from    "nestjs/typeorm"
d. 'entities' will be the array of class/classes that contains schema of the tables.
e. ex:
   TypeOrmModule.forRoot({
      type: 'postgres',
      host: 'localhost',
      port: 5432,
      username: 'postgres',
      password: 'abcd',
      database: 'postgres',
      entities: [User],
      synchronize: true,
    }),

    synchronize will sync the schema code written in nest with the database and changes will be reflected
    immediately.
f. Now import GraphQLModule from '@nestjs/graphql' & ApolloDriver,ApolloDriverConfig from '@nestjs/apollo'
g. We'll now setup connection for graphQL, in the same imports array
h. GraphQLModule.forRoot<ApolloDriverConfig>({
      driver: ApolloDriver,
      autoSchemaFile: 'src/graph.gql'
    }),
    autoSchemaFile represents the path where the file named 'graph.gql' will be generated that'll contain the
    all the schema of graphQL
i. Now we'll specify the module for the graphQL that contains resolvers and services. This module will contain 	
   the resolvers and services for the graphQL as well as the schema

Making the entities & graphQL query:
a). Now with the help of typeORM and '@Entity' we'll be making the entities that'll work as schema for the         database table
    and generate the table in database.
b). In the same file we can make the schema for the graphQL schema. The schema could be of 2 types Object Type      Input Type. Input type is for the parameters that we pass while making a query.
    ex: 
	@ObjectType()
	export class Delete {
  	 @Field({ nullable: false })
  	 msg: string;
	}

    ex:
	@InputType()
	export class DeleteUserInput {
	  @Field({ nullable: false })
	  id: string;
	}

Making the resolvers and services:
a. With help of @Resolver constructor, specifying the type of resolver that we made in the previous step.
   Now we make a class and with help of @Query constructor we build a query providing the name and return type    for the same.
  ex:
	@Query(() => [User], { name: 'users', nullable: true })
  	async getUsers() {
    	return this.userService.findAllUsers();
  	}
b. After query is written we make the solution for it in services file that we use in the resolver file.
	ex:
		findAllUsers() {
    			return this.userRepository.find();
  		}
	